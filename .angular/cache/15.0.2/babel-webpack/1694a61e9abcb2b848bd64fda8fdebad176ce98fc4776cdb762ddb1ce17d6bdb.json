{"ast":null,"code":"import * as auth from '../auth/auth.actions';\nimport { map, pipe } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@ngrx/store\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(auth, firestore, store) {\n      this.auth = auth;\n      this.firestore = firestore;\n      this.store = store;\n    }\n    initAuthListener() {\n      this.auth.authState.subscribe(firebaseUser => {\n        if (firebaseUser) {\n          this.firestore.collection('usuarios', ref => ref.where(\"idUsuario\", \"==\", ref.id)).valueChanges(pipe(map(res => {\n            res;\n            this.store.dispatch(auth.setUser({\n              user: {\n                correo: firebaseUser.email,\n                idUsuario: firebaseUser.uid,\n                nombre: res.nombre\n              }\n            }));\n          })));\n        }\n        // console.log(firebaseUser);\n        // console.log(firebaseUser?.email);\n        // console.log(firebaseUser?.uid);\n      });\n    }\n\n    crearUsuario(usuario) {\n      console.log(\"el user\", usuario);\n      return this.auth.createUserWithEmailAndPassword(usuario.correo, usuario.password).then(({\n        user\n      }) => {\n        const usuarioNuevo = {\n          correo: user.email,\n          idUsuario: user.uid,\n          nombre: usuario.nombre\n        };\n        this.firestore.collection('usuarios').add(usuarioNuevo).then(res => {\n          console.log(\"usuariocreado\", res);\n        }).catch(err => console.warn(\"errores al grabar user\", err));\n        return usuarioNuevo;\n      });\n    }\n    loguearUsuario(usuario) {\n      return this.auth.signInWithEmailAndPassword(usuario.correo, usuario.password);\n    }\n    logout() {\n      return this.auth.signOut();\n    }\n    isAuth() {\n      return this.auth.authState.pipe(map(fbUser => fbUser != null));\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Store));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}