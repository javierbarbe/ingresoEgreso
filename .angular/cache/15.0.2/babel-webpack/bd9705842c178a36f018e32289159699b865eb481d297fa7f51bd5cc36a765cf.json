{"ast":null,"code":"import * as auth from \"../auth/auth.actions\";\nimport { map, take } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@ngrx/store\";\n// Initialize Cloud Firestore and get a reference to the service\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(auth, firestore, store) {\n      this.auth = auth;\n      this.firestore = firestore;\n      this.store = store;\n    }\n    //  app = initializeApp(environment.firebase);\n    //  db = getFirestore(this.app);\n    initAuthListener() {\n      this.auth.authState.subscribe(firebaseUser => {\n        console.log(\"initAuthListener\", firebaseUser);\n        // Create a reference to the cities collection\n        // Create a query against the collection\n        // const queryRef = usersRef.where('state', '==', 'CA');\n        if (firebaseUser) {\n          //#region BASURA\n          // const usuariosRef = collection(this.firestore.firestore, \"usuarios\");\n          // Create a query against the collection.\n          // const q = query(usuariosRef, where(\"idUsuario\", \"==\", firebaseUser.uid));\n          // const res = await getDocs(q);//.then(r=> console.log(\"encontrado\",r));\n          // const res1 = getDocs(q).then(r=> console.log(\"encontrado2\",r));\n          // console.log({query:q,respuesta:res,respuesta2:res1})\n          // console.log(firebaseUser.uid);\n          // const qa = query(collection(db, \"usuarios\"), where(\"idUsuario\", \"==\", firebaseUser.uid));\n          // qa.\n          // const querySnapshot =  getDocs(collection(this.db, \"usuarios\")).then(doc=> {\n          //   doc.forEach(doc1=> {\n          //     console.log(\"objeto doc1\",doc1)\n          //     console.log(`${doc1.id} => ${doc1.data()}`);\n          //   })\n          // });\n          //#endregion\n          // this.firestore.collection(\"usuarios\", ref=> ref.where(\"idUsuario\",\"==\",firebaseUser.uid)).get()\n          //     .subscribe(data=>data.forEach( el=> console.log(\"el.data() == \",el.data()) ));\n          this.firestore.collection(\"usuarios\").get().subscribe(data => data.forEach(el => console.log(\"el.data()  TODOS\", el.data())));\n          this.firestore.collection(\"usuarios\", ref => ref.where(\"idUsuario\", \"==\", firebaseUser.uid)).valueChanges().pipe(take(1), map(userResp => {\n            const user = userResp[0];\n            console.log(\"el usuario desde firebase\", user);\n            this.store.dispatch(auth.setUser({\n              user\n              // al coincidir las propiedades de firebase con las del objeto state no es necesaria conversión\n              // : {\n              //   correo: firebaseUser.email,\n              //   idUsuario: firebaseUser.uid,\n              //   nombre: user.nombre,\n              // },\n            }));\n\n            return user;\n          })).subscribe(res => {\n            console.log(\"resultado suscripcion\", res);\n          });\n          // this.firestore\n          //   .collection<Usuario[]>(\"usuarios\")\n          //   .valueChanges()\n          //   .pipe(\n          //     take(1),\n          //     map((userResp) => {\n          //       console.log(\"he encontrado en value changes?? TODOS\", userResp);\n          //       const user = userResp as Usuario;\n          //       console.log(\"el usuario desde firebase TODOS\", user);\n          //       this.store.dispatch(\n          //         auth.setUser({\n          //           user: {\n          //             correo: firebaseUser.email,\n          //             idUsuario: firebaseUser.uid,\n          //             nombre: user.nombre,\n          //           },\n          //         })\n          //       );\n          //       return userResp;\n          //     })\n          //   )\n          //   .subscribe((res) => {\n          //     console.log(\"resultado suscripcion TODOS\", res);\n          //   });\n        } else {\n          console.log(\"no hay usuario\");\n        }\n      });\n    }\n    crearUsuario(usuario) {\n      console.log(\"el user\", usuario);\n      return this.auth.createUserWithEmailAndPassword(usuario.correo, usuario.password).then(({\n        user\n      }) => {\n        const usuarioNuevo = {\n          correo: user.email,\n          idUsuario: user.uid,\n          nombre: usuario.nombre\n        };\n        this.firestore.collection(\"usuarios\").add(usuarioNuevo).then(res => {\n          console.log(\"usuariocreado\", res);\n        }).catch(err => console.warn(\"errores al grabar user\", err));\n        return usuarioNuevo;\n      });\n    }\n    loguearUsuario(usuario) {\n      return this.auth.signInWithEmailAndPassword(usuario.correo, usuario.password);\n    }\n    logout() {\n      return this.auth.signOut();\n    }\n    isAuth() {\n      return this.auth.authState.pipe(map(fbUser => fbUser != null));\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Store));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}