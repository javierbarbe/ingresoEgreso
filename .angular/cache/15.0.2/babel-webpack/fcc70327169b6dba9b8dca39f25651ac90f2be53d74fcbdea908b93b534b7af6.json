{"ast":null,"code":"import { environment } from './../../environments/environment.prod';\nimport * as auth from '../auth/auth.actions';\nimport { map } from 'rxjs';\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { initializeApp } from '@angular/fire/app';\nconst app = initializeApp(environment.firebase);\n// Initialize Cloud Firestore and get a reference to the service\nconst db = getFirestore(app);\nexport class AuthService {\n  constructor(auth, firestore, store) {\n    this.auth = auth;\n    this.firestore = firestore;\n    this.store = store;\n  }\n  initAuthListener() {\n    this.auth.authState.subscribe(firebaseUser => {\n      console.log(\"initAuthListener\", firebaseUser);\n      // Create a reference to the cities collection\n      // Create a query against the collection\n      // const queryRef = usersRef.where('state', '==', 'CA');\n      if (firebaseUser) {\n        const citiesRef = collection(this.firestore.firestore, \"usuarios\");\n        // Create a query against the collection.\n        const q = query(citiesRef, where(\"idUsuario\", \"==\", firebaseUser.uid));\n        const res = getDocs(q).then(r => console.log(\"encontrado\", r));\n        console.log({\n          q,\n          res\n        });\n        console.log(firebaseUser.uid);\n        // const qa = query(collection(db, \"usuarios\"), where(\"idUsuario\", \"==\", firebaseUser.uid));\n        // qa.\n        const querySnapshot = getDocs(collection(db, \"usuarios\")).then(doc => {\n          doc.forEach(doc1 => {\n            console.log(`${doc1.id} => ${doc1.data()}`);\n          });\n        });\n        this.firestore.collection(\"usuarios\", ref => ref.where(\"idUsuario\", \"==\", firebaseUser.uid)).get().subscribe(data => data.forEach(el => console.log(\"el.data()\", el.data())));\n        this.firestore.collection('usuarios', ref => ref.where(\"uid\", \"==\", firebaseUser.uid)).valueChanges()\n        // , ref=> ref.where(\"idUsuario\",\"==\",firebaseUser.uid)).valueChanges()\n        .pipe(map(userResp => {\n          const user = userResp;\n          console.log(\"el usuario desde firebase\", user);\n          this.store.dispatch(auth.setUser({\n            user: {\n              correo: firebaseUser.email,\n              idUsuario: firebaseUser.uid,\n              nombre: user.nombre\n            }\n          }));\n        }));\n      } else {\n        console.log(\"no hay usuario\");\n      }\n      // console.log(firebaseUser);\n      // console.log(firebaseUser?.email);\n      // console.log(firebaseUser?.uid);\n    });\n  }\n\n  crearUsuario(usuario) {\n    console.log(\"el user\", usuario);\n    return this.auth.createUserWithEmailAndPassword(usuario.correo, usuario.password).then(({\n      user\n    }) => {\n      const usuarioNuevo = {\n        correo: user.email,\n        idUsuario: user.uid,\n        nombre: usuario.nombre\n      };\n      this.firestore.collection('usuarios').add(usuarioNuevo).then(res => {\n        console.log(\"usuariocreado\", res);\n      }).catch(err => console.warn(\"errores al grabar user\", err));\n      return usuarioNuevo;\n    });\n  }\n  loguearUsuario(usuario) {\n    return this.auth.signInWithEmailAndPassword(usuario.correo, usuario.password);\n  }\n  logout() {\n    return this.auth.signOut();\n  }\n  isAuth() {\n    return this.auth.authState.pipe(map(fbUser => fbUser != null));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}